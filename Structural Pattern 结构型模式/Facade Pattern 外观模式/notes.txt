外观模式

为复杂的子系统调用提供一个统一的入口，降低子系统和客户端的耦合度

例子：自己泡茶和去茶馆喝茶（茶馆服务员就是外观类）

抽象外观类：客户端调用抽象外观类，而具体外观类才是真正调用子系统，方便增加具体外观类

适用：
(1) 当要为访问一系列复杂的子系统提供一个简单入口时可以使用外观模式。
(2) 客户端程序与多个子系统之间存在很大的依赖性。引入外观类可以将子系统与客户端解耦，从而提高子系统的独立性和可移植性。
(3) 在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。
